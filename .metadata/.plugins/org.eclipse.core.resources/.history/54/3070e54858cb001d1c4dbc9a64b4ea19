import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.spy;

import java.util.stream.Stream;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.Arguments.arguments;
import org.junit.jupiter.params.provider.MethodSource;

class TestDemoTest {

	@BeforeEach
	void setUp() throws Exception {
        TestDemo test = new TestDemo();
	}
    
	@ParameterizedTest
	@MethodSource("TestDemoTest#argumentsForAddPositive")
	public void assertThatTwoPositiveNumbersAreAddedCorrectly() {
		int a = 0;
		int b = 0;
		int expected = 0;
		Boolean expectException = null;

		if(!expectException) {
			assertThat(TestDemo.addPositive(a,b)).isEqualTo(expected);
		}
		else {
			assertThatThrownBy(() -> TestDemo.addPositive(a,b)).isInstanceOf(IllegalArgumentException.class);
		}
	}

	@org.junit.jupiter.api.Test
	private int assertThatNumberSquaredIsCorrect() {
		TestDemo mockDemo = spy(mockDemo);
		Object aValue;
		doReturn(aValue).when(mockDemo).methodCall();
		int fiveSquared = mockDemo.randomNumberSquared();
		assertThat(fiveSquared).isEqualTo(25);
	}

	public static Stream<Arguments> argumentsForAddPositive() {
		// @formatter:off
		return Stream.of(
			Arguments.arguments(2,4,6,false),
			Arguments.arguments(0,0,0,false),
			Arguments.arguments(-3,1,-2,false),
			Arguments.arguments(-4,0,-4,false),
			Arguments.arguments(5,2,7,true),
			Arguments.arguments(0,3,3,true),
			Arguments.arguments(12,-8,4,true)
				);
		// @formatter:on
	}

}
